namespace Gu.Inject.Analyzers.Tests.GuInj001AddAutoBindTests
{
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Gu.Inject.Analyzers.CodeFixes;
    using Gu.Roslyn.AnalyzerExtensions;
    using Gu.Roslyn.Asserts;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using Microsoft.CodeAnalysis.Editing;
    using NUnit.Framework;

    public static partial class CodeFix
    {
        [Test]
        public static async Task VerifyGeneratedAst()
        {
            // Had trouble getting whitespace right when using SyntaxGenerator
            var sln = CodeFactory.CreateSolution(@"
namespace A.B.C
{
    using Gu.Inject;
    using Gu.Inject.Tests.Types;

    public class C
    {
        public C()
        {
            var x = new Container<Foo>();
        }
    }
}", MetadataReferences.FromAttributes());
            var document = sln.Projects.Single().Documents.Single();
            var syntaxRoot = await document.GetSyntaxRootAsync(CancellationToken.None)
                                          .ConfigureAwait(false);
            var semanticModel = await document.GetSemanticModelAsync(CancellationToken.None).ConfigureAwait(false);

            var actual = AutoBindFix.ExtensionClass(
                SyntaxGenerator.GetGenerator(document.Project),
                syntaxRoot.Find<NamespaceDeclarationSyntax>("A.B.C").Name,
                (INamedTypeSymbol)semanticModel.GetTypeInfo(syntaxRoot.Find<ObjectCreationExpressionSyntax>("new Container<Foo>()")).Type,
                semanticModel,
                syntaxRoot.Find<ObjectCreationExpressionSyntax>("new Container<Foo>()"));

            var expected = CSharpSyntaxTree.ParseText(@"namespace A.B.C
{
    /// <summary>
    /// Extension methods for <see cref=""Gu.Inject.Container{T}"" />.
    /// This file is generated by Gu.Inject.Analyzers.
    /// </summary>
    // <auto-generated/>
    public static class ContainerExtensions
    {
        /// <summary>
        /// Adds generated bindings for the graph where <see cref=""Gu.Inject.Tests.Types.Foo""/> is root.
        /// This method is generated by Gu.Inject.Analyzers.
        /// </summary>
        /// <param name=""container"">The <see cref=""Gu.Inject.Container{Gu.Inject.Tests.Types.Foo}""/>.</param>
        public static Gu.Inject.Container<Gu.Inject.Tests.Types.Foo> AutoBind(this Gu.Inject.Container<Gu.Inject.Tests.Types.Foo> container)
        {
            return container.Bind(x => new Gu.Inject.Tests.Types.Foo(x.Get<Gu.Inject.Tests.Types.Bar>())
                            .Bind(_ => new Gu.Inject.Tests.Types.Bar());
        }
    }
}").Find<NamespaceDeclarationSyntax>("A.B.C");
            RoslynAssert.Ast(expected, Rewriter.Visit(actual.Find<NamespaceDeclarationSyntax>("A.B.C")));
        }

        private class Rewriter : CSharpSyntaxRewriter
        {
            private static Rewriter Default = new Rewriter();

            private Rewriter()
                : base(visitIntoStructuredTrivia: true)
            {
            }

            public static SyntaxNode Visit(SyntaxNode node) => ((CSharpSyntaxRewriter)Default).Visit(node);

            public override SyntaxTriviaList VisitList(SyntaxTriviaList list)
            {
                if (list.TrySingle(out var trivia) &&
                    trivia.IsKind(SyntaxKind.WhitespaceTrivia) &&
                    trivia.Span.IsEmpty)
                {
                    return default(SyntaxTriviaList);
                }

                return base.VisitList(list);
            }
        }
    }
}