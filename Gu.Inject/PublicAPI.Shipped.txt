#nullable enable
Gu.Inject.CircularDependencyException
Gu.Inject.CircularDependencyException.CircularDependencyException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
Gu.Inject.CircularDependencyException.CircularDependencyException(System.Type! type, string! message) -> void
Gu.Inject.IGetter
Gu.Inject.IGetter.Get(System.Type! type) -> object!
Gu.Inject.IGetter.Get<T>() -> T
Gu.Inject.Kernel
Gu.Inject.Kernel.Bind(System.Type! from, System.Type! to) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<T>(System.Func<Gu.Inject.IGetter!, T>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<T>(System.Func<T>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<T>(T instance) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface, TConcrete>() -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface, TConcrete>(System.Func<Gu.Inject.IGetter!, TConcrete>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface, TConcrete>(System.Func<TConcrete>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface, TConcrete>(TConcrete instance) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TConcrete>() -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TConcrete>(System.Func<Gu.Inject.IGetter!, TConcrete>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TConcrete>(System.Func<TConcrete>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TConcrete>(TConcrete instance) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TInterface3, TConcrete>() -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TInterface3, TConcrete>(System.Func<Gu.Inject.IGetter!, TConcrete>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TInterface3, TConcrete>(System.Func<TConcrete>! create) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Bind<TInterface1, TInterface2, TInterface3, TConcrete>(TConcrete instance) -> Gu.Inject.Kernel!
Gu.Inject.Kernel.BindUninitialized<T>() -> Gu.Inject.Kernel!
Gu.Inject.Kernel.Created -> System.EventHandler<object!>?
Gu.Inject.Kernel.Creating -> System.EventHandler<System.Type!>?
Gu.Inject.Kernel.Dispose() -> void
Gu.Inject.Kernel.Get(System.Type! type) -> object!
Gu.Inject.Kernel.Get<T>() -> T
Gu.Inject.Kernel.Kernel() -> void
Gu.Inject.NoBindingException
Gu.Inject.NoBindingException.NoBindingException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
Gu.Inject.NoBindingException.NoBindingException(System.Type! type) -> void
Gu.Inject.ResolveException
Gu.Inject.ResolveException.ResolveException(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void
Gu.Inject.ResolveException.ResolveException(System.Type! type, Gu.Inject.ResolveException! inner) -> void
Gu.Inject.ResolveException.ResolveException(System.Type! type, string! message) -> void
Gu.Inject.ResolveException.Type.get -> System.Type!
override Gu.Inject.ResolveException.GetObjectData(System.Runtime.Serialization.SerializationInfo! info, System.Runtime.Serialization.StreamingContext context) -> void