// ReSharper disable UnusedParameter.Local
// ReSharper disable UnusedMember.Global
// ReSharper disable EmptyConstructor
namespace Gu.Inject.Benchmarks.Types
{
    using System.Collections.Generic;
	using System.Linq;
    
	public static class Graph5
    {
        public class Node1 : INode
        {
            public Node1(
                Node2 node2)
            {
                this.Children = new INode[]
			    {
				                    node2
			    };
            }

		    public IReadOnlyList<INode> Children { get; }

			public IEnumerable<INode> AllChildren => this.Children.Concat(this.Children.SelectMany(c => c.AllChildren));
        }

        public class Node2 : INode
        {
            public Node2()
            {
                this.Children = new INode[]
			    {
							    };
            }

		    public IReadOnlyList<INode> Children { get; }

			public IEnumerable<INode> AllChildren => this.Children.Concat(this.Children.SelectMany(c => c.AllChildren));
        }

        public class Node3 : INode
        {
            public Node3()
            {
                this.Children = new INode[]
			    {
							    };
            }

		    public IReadOnlyList<INode> Children { get; }

			public IEnumerable<INode> AllChildren => this.Children.Concat(this.Children.SelectMany(c => c.AllChildren));
        }

        public class Node4 : INode
        {
            public Node4()
            {
                this.Children = new INode[]
			    {
							    };
            }

		    public IReadOnlyList<INode> Children { get; }

			public IEnumerable<INode> AllChildren => this.Children.Concat(this.Children.SelectMany(c => c.AllChildren));
        }
    }
}
